#LSTM Stock

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# Load the data
# Assuming you have a CSV file with stock prices
data = pd.read_csv("//content//prices-split-adjusted.csv")
prices = data['close'].values.reshape(-1, 1)

# Normalize the data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_prices = scaler.fit_transform(prices)


# Define a function to prepare the data for LSTM
def prepare_data(data, time_steps):
    X, y = [], []
    for i in range(len(data) - time_steps - 1):
        X.append(data[i:(i + time_steps), 0])
        y.append(data[i + time_steps, 0])
    return np.array(X), np.array(y)

# Define hyperparameters
time_steps = 60  # Number of time steps to look back
train_size = int(len(scaled_prices) * 0.8)  # 80% of data for training


# Prepare the data
X, y = prepare_data(scaled_prices, time_steps)
X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]


# Reshape data for LSTM (samples, time_steps, features)
X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))


# Build the LSTM model
model = Sequential([
    LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)),
    LSTM(units=50, return_sequences=False),
    Dense(units=25),
    Dense(units=1)
])


# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X_train, y_train, batch_size=32, epochs=3)


# Predictions
predictions = model.predict(X_test)
predictions = scaler.inverse_transform(predictions)


# Visualize the results
plt.figure(figsize=(10, 6))
plt.plot(data.index[train_size + time_steps + 1:], predictions, label='Predicted Prices')
plt.plot(data.index[train_size + time_steps + 1:], data['close'].values[train_size + time_steps + 1:], label='Actual Prices')
plt.xlabel('Date')
plt.ylabel('Price')
plt.title('Stock Price Prediction')
plt.legend()
plt.show()







